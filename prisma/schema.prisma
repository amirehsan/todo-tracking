// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js models

model Account {
  id                 String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String  @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// Application models

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relations from my app
  analyses      AnalysisResult[]
  comparisons   Comparison[]

  // Relations for NextAuth
  accounts      Account[]
  sessions      Session[]
}

model TwitterProfile {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username          String    @unique
  display_name      String?
  bio               String?
  followers_count   Int?
  following_count   Int?
  tweet_count       Int?
  verified          Boolean   @default(false)
  profile_image_url String?
  last_scraped_at   DateTime?
  created_at        DateTime  @default(now())
  analyses          AnalysisResult[]
  tweets            TweetCache[]
}

model AnalysisResult {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                 String    @db.Uuid
  user                    User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  twitter_profile_id      String    @db.Uuid
  twitter_profile         TwitterProfile @relation(fields: [twitter_profile_id], references: [id], onDelete: Cascade)
  political_leaning       Json
  political_issues        Json
  recent_themes           Json
  sentiment_analysis      Json
  ai_overview             String?
  analyzed_tweets_count   Int       @default(0)
  analysis_date           DateTime  @default(now())
  ai_model_used           String?
  created_at              DateTime  @default(now())
}

model TweetCache {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  twitter_profile_id String    @db.Uuid
  twitter_profile    TwitterProfile @relation(fields: [twitter_profile_id], references: [id], onDelete: Cascade)
  tweet_id           String    @unique
  content            String
  created_at_twitter DateTime?
  retweet_count      Int       @default(0)
  like_count         Int       @default(0)
  reply_count        Int       @default(0)
  scraped_at         DateTime  @default(now())
}

model Comparison {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String   @db.Uuid
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  name              String
  profile_ids       String[] @db.Uuid
  comparison_result Json
  created_at        DateTime @default(now())
}
